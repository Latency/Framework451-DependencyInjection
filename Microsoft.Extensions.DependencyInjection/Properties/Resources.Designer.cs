//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Extensions.DependencyInjection.Properties {
    using System;
    using System.Globalization;
    using System.Resources;

    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {

        private static readonly ResourceManager _resourceManager
            = new ResourceManager("Microsoft.Extensions.DependencyInjection.Resources", typeof(Resources).GetType().Assembly);

        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Microsoft.Extensions.DependencyInjection.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to activate type &apos;{0}&apos;. The following constructors are ambigious:.
        /// </summary>
        internal static string AmbigiousConstructorException {
            get {
                return ResourceManager.GetString("AmbigiousConstructorException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to resolve service for type &apos;{0}&apos; while attempting to activate &apos;{1}&apos;..
        /// </summary>
        internal static string CannotResolveService {
            get {
                return ResourceManager.GetString("CannotResolveService", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A circular dependency was detected for the service of type &apos;{0}&apos;..
        /// </summary>
        internal static string CircularDependencyException {
            get {
                return ResourceManager.GetString("CircularDependencyException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot resolve {1} service &apos;{0}&apos; from root provider..
        /// </summary>
        internal static string DirectScopedResolvedFromRootException {
            get {
                return ResourceManager.GetString("DirectScopedResolvedFromRootException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A suitable constructor for type &apos;{0}&apos; could not be located. Ensure the type is concrete and services are registered for all parameters of a public constructor..
        /// </summary>
        internal static string NoConstructorMatch {
            get {
                return ResourceManager.GetString("NoConstructorMatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Open generic service type &apos;{0}&apos; requires registering an open generic implementation type..
        /// </summary>
        internal static string OpenGenericServiceRequiresOpenGenericImplementation {
            get {
                return ResourceManager.GetString("OpenGenericServiceRequiresOpenGenericImplementation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot consume {2} service &apos;{0}&apos; from {3} &apos;{1}&apos;..
        /// </summary>
        internal static string ScopedInSingletonException {
            get {
                return ResourceManager.GetString("ScopedInSingletonException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot resolve &apos;{0}&apos; from root provider because it requires {2} service &apos;{1}&apos;..
        /// </summary>
        internal static string ScopedResolvedFromRootException {
            get {
                return ResourceManager.GetString("ScopedResolvedFromRootException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot instantiate implementation type &apos;{0}&apos; for service type &apos;{1}&apos;..
        /// </summary>
        internal static string TypeCannotBeActivated {
            get {
                return ResourceManager.GetString("TypeCannotBeActivated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No constructor for type &apos;{0}&apos; can be instantiated using services from the service container and default values..
        /// </summary>
        internal static string UnableToActivateTypeException {
            get {
                return ResourceManager.GetString("UnableToActivateTypeException", resourceCulture);
            }
        }

        internal static string FormatAmbigiousConstructorException(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("AmbigiousConstructorException"), p0);
        }

        /// <summary>
        /// Unable to resolve service for type '{0}' while attempting to activate '{1}'.
        /// </summary>
        internal static string FormatCannotResolveService(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("CannotResolveService"), p0, p1);
        }

        /// <summary>
        /// A circular dependency was detected for the service of type '{0}'.
        /// </summary>
        internal static string FormatCircularDependencyException(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("CircularDependencyException"), p0);
        }

        /// <summary>
        /// No constructor for type '{0}' can be instantiated using services from the service container and default values.
        /// </summary>
        internal static string FormatUnableToActivateTypeException(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("UnableToActivateTypeException"), p0);
        }

        /// <summary>
        /// Cannot instantiate implementation type '{0}' for service type '{1}'.
        /// </summary>
        internal static string FormatTypeCannotBeActivated(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("TypeCannotBeActivated"), p0, p1);
        }

        /// <summary>
        /// A suitable constructor for type '{0}' could not be located. Ensure the type is concrete and services are registered for all parameters of a public constructor.
        /// </summary>
        internal static string FormatNoConstructorMatch(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("NoConstructorMatch"), p0);
        }

        /// <summary>
        /// Cannot consume {2} service '{0}' from {3} '{1}'.
        /// </summary>
        internal static string FormatScopedInSingletonException(object p0, object p1, object p2, object p3)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ScopedInSingletonException"), p0, p1, p2, p3);
        }

        /// <summary>
        /// Cannot resolve '{0}' from root provider because it requires {2} service '{1}'.
        /// </summary>
        internal static string FormatScopedResolvedFromRootException(object p0, object p1, object p2)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ScopedResolvedFromRootException"), p0, p1, p2);
        }

        /// <summary>
        /// Open generic service type '{0}' requires registering an open generic implementation type.
        /// </summary>
        internal static string FormatOpenGenericServiceRequiresOpenGenericImplementation(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("OpenGenericServiceRequiresOpenGenericImplementation"), p0);
        }

        /// <summary>
        /// Cannot resolve {1} service '{0}' from root provider.
        /// </summary>
        internal static string FormatDirectScopedResolvedFromRootException(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("DirectScopedResolvedFromRootException"), p0, p1);
        }

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            System.Diagnostics.Debug.Assert(value != null);

            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}
